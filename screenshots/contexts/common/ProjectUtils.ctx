--- RCPTT testcase ---
Format-Version: 1.0
Context-Type: org.eclipse.rcptt.ctx.ecl
Element-Name: ProjectUtils
Element-Type: context
Element-Version: 2.0
Id: _lbFrAAbTEeqelOY6v4JKGw
Runtime-Version: 2.5.0.201907212359
Save-Time: 11/14/19, 12:40 PM

------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998
Content-Type: text/ecl
Entry-Name: .ecl.context

proc "import-ivy-projects" [val archiveGroup] {
	get-menu "File/Import..." | click
	get-window Import | get-tree | select "Axon.ivy/Ivy Projects.*" | double-click
	with [get-window "Ivy Projects Import"] {
		get-tree| get-item $archiveGroup | check
    	get-button Finish | click
	}
	wait 1000
}

proc packProject [val projectName]
{
	get-view "Axon.ivy Projects" | get-tree | select $projectName | get-menu -path "Pack Project (*.iar)" | click
}

proc unpackProject [val projectName]
{
	get-view "Axon.ivy Projects" | get-tree | select $projectName | get-menu -path "Unpack Project (*.iar)" | click
}

proc deleteProject [val projectName]
{
	get-view "Axon.ivy Projects" | get-tree | select $projectName | get-menu -path Delete | click
	with [get-window Refactoring] {
	    get-button "Delete project contents on disk (cannot be undone)" | check
	    get-button Finish | click
	}		
}

proc deleteAllProjects
{
	get-view "Axon.ivy Projects" | get-tree | select ".*" -all | get-menu -path Delete | click
	with [get-window Refactoring] {
	    get-button "Delete project contents on disk (cannot be undone)" | check
	    get-button Finish | click
	}		
}

proc openDefinition [val projectName] [val definitions]
{
	with [get-view "Axon.ivy Projects" | get-tree] 
	{
		get-item [concat $projectName "/Definitions/" $definitions] | double-click
	}
}

proc addRequiredProject [val project] [val requiredProject]
{
	openDefinition $project "Deployment"
	with [get-editor $project]
	{
		get-tab-folder | get-tab-item "Required Projects" | click
		get-section "Required Projects" | get-button Add | click
	}
	
	with [get-window "Add Required Project"]
	{
	    get-combo -after [get-label "Select project:"] | select [concat $requiredProject ".*"]
	    get-button OK | click
	}
	get-button "Save (M1+S)" | click
}

proc assertNoRunningOperations {
	measure-time "CheckRunningOperations" {
		loop {
			try {
				get-view Progress | get-button "Cancel Operation"
				recur
			} -catch {
				// Exit loop when no cancel operation available
			}
		}
	} | constrain-max duration 10000
}
------=_.ecl.context-718f04b4-ed39-33e3-af62-0995e4561998--
