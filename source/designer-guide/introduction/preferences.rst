.. _workspace-preferences:

Preferences
===========

In the preferences you can configure some Axon Ivy Designer settings to
adapt it to your personal working style. Most of these settings you can
overwrite in the :ref:`project-preferences`.



.. _workspace-preferences-email:

Email Settings
--------------

These settings define the configuration for the :ref:`process-element-email-activity`
on the designer.


.. note::
   
   On the Engine you need to specifically set the ``EMail.Server.*``
   in :ref:`ivy-yaml`.


.. figure:: /_images/designer/preferences-email.png
   :alt: Email Preferences
   :align: center
   
   Email Preferences

Use custom mail server
   If selected all mails will be sent to the configured mail server.

SMTP host name
   Hostname of your outgoing email server (the SMTP server).

Use default SMTP port
   If selected the default SMTP port depending on the encryption method
   is used.

SMTP port
   The port your SMTP server is listening to.

SMTP user name
   A valid user name for your outgoing email server to authenticate on
   it (if this feature is used).

SMTP password
   The password for the given user name above.

Encryption method
   The encryption method used for the communication with your mail
   server.

Use SSL client key
   Only select this option if the SMTP server requires a client
   certificate to authenticate the client. The key (certificate) will be
   read from a key store. See section :ref:`workspace-preferences-sslclient`
   for more information.

SSL client key alias
   The name (alias) of the key to send to the SMTP server. If empty the
   first key found in the key store is used.

Test mail address (from)
   In the designer, this email address overwrites the sender setting in
   the inscription mask of the :ref:`process-element-email-activity`.
   Mails are not sent to
   the address that is configured in the inscription mask but to this
   address. Therefore you can test the functioning of your processes
   without sending emails to the real addresses.

Test mail address (to)
   The same principle as above but for the recipient.

Send Test Email
   Sends a test mail with the current settings. With the default
   preferences you should instantly see the sent mail in the 'Email
   Messages' view which is provided by the developer SMTP.


.. _workspace-preferences-email-developer-smtp:

Developer SMTP
~~~~~~~~~~~~~~

During process development, mails generated by the Axon Ivy Platform are
preferably not sent to a real SMTP server. Usually, you just need to quickly
inspect the contents of these generated mails. A real remote SMTP will increase
the round-trip time required to read these messages. Therefore the Designer
comes pre-configured with a simple SMTP mail server.

With the default E-Mail preferences, every mail will be sent to the development
SMTP. You can inspect the mail inbox by opening the view 'Email Messages'.

.. figure:: /_images/designer/mail-snag.png
   :alt: Mail Snag View
   :align: center
   
   Mail Snag View


.. _process-editor-preferences:

Process Editor Settings
-----------------------

The process editor settings are used to configure the behavior and look
of the process editor as well as some settings that are related to the
use of processes.

.. figure:: /_images/designer/preferences-processeditor.png
   :alt: Process Editor Preferences
   :align: center
   
   Process Editor Preferences


Show grid lines in the editor
   Specify whether the grid lines in the process editor are shown.


.. _workspace-preferences-process-engine:

Process Engine Settings
-----------------------

Here you can set whether the internal Browser view of Eclipse or an
external Browser is used to show the Process Start Overview and you can
configure all the settings related to the animation.

.. figure:: /_images/designer/preferences-processengine.png
   :alt: Process Engine Preferences
   :align: center
   
   Process Engine Preferences
   

Automatically start all process engines on Designer start
   If the check box is selected, all process engines are automatically
   started on Designer start. It can be disabled to prevent performance
   issues on large workspaces.

Animation speed fast < - > slow
   Sets the default speed of the animation. Setting the slider to a low
   value lets you observe the process flow easily as the animation speed
   is decreased.

   .. tip::
   
      As the animation is very slow with low slider values adjust this
      setting only when you need to debug a process in its lowest
      details and increase the speed as soon you have finished.

Simulation/Animation follow
   Here you can set in which mode the execution is animated. You can
   choose between the following values:

   -  **Do not follow the animation at all** - does nothing

   -  **Show and open all touched processes (default)** - Default setting,
      this opens a process editor window for every process (or User
      Dialog logic in case of inner User Dialogs) that is used within
      the started process

   -  **Follow only top level business processes** - Simulates and opens
      only top level business processes. Does not enter User Dialogs,
      embedded subs or callable subs.

   -  **Do not enter dialog logic** - Does not simulate User Dialogs

   -  **Follow only in open editors** - You can choose which process are
      animated by opening them in a process editor window. Note that the
      focus switches always the window displaying the currently executed
      process

   -  **Follow only in current editor on top** - If you are only interested
      to debug one specific process. Note, that this is not imperatively
      the top-level process

History
   Here you can configure how many process data snapshots are archived
   in the process engine history (:ref:`History View <simulate-process-models-debugger-history-view>`).

   -  **Activate history** - If ticked process data is archived, if not
      ticked no process data is archived.

   -  **Number of requests to keep in history** (0 means all) - Here you can
      configure the number of requests per process element for which
      snapshots of the process data are stored in the history. If you
      configure 0 the process data snapshots for all requests are
      stored.

   -  **Number of executions to keep in history** (0 means all) - Here you
      can configure the number of executions per requests and process
      element for which snapshots of the process data are stored in the
      history. If you configure 0 the process data snapshots for all
      executions are stored. A value of 10 means that the process data
      snapshots of the five oldest and youngest executions of a process
      element per request are stored in the history.

   .. note::

      In case of memory shortage during simulation the settings of
      history preferences may be ignored (resulting in less snapshots
      shown in the history).

Event Bean Simulation
   Switch off the simulation of Process Start or Intermediate Event
   Beans when you want to focus on simulations of other elements (Event
   Bean simulation may pop up process editors with the corresponding
   process and may overflow the :ref:`simulate-process-models-debugger-runtimelog-view`.
   In order to apply changes, the Engine must be restarted.

   -  Execute Start Event Beans in Simulation - If ticked, the Process
      Start Event Beans are executed, otherwise not.

   -  Execute Intermediate Event Beans in Simulation - If ticked, the
      Intermediate Start Event Beans are executed, otherwise not.





.. _workspace-preferences-sslclient:

SSL Client Settings
-------------------

These settings define the key and trust stores to be used for SSL/TLS
client connections.

.. note::

   On the Engine you need to specifically set the ``SSL.Client.*`` in :ref:`ivy-yaml`.


A key store is used to read client keys (certificates). This is only
required if a server requests a client certificate in order to
authenticate the client.

A trust store is used to specify trusted server certificates or
certificates of certification authorities. An SSL client authenticates a
server by using the certificates in a trust store. If the server
provides a certificate that is signed by a certification authority known
by Java then the system trust store can be used. If the server uses a
certificate that is self signed or signed by a unknown certification
authority then a custom trust store can be used. The custom trust store
must contain the server certificate or the certificate of the unknown
certification authority.

Key and trust stores can be created and modified (generation and import
of certificates and keys) with a graphical keytool like the `KeyStore
Explorer <http://keystore-explorer.org/>`__ or by the
`keytool <http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html>`__
included in the Java Development Kit (JDK). More information can be
found in the documentation of the JDK.

.. figure:: /_images/designer/preferences-sslclient.png
   :alt: SSL Client Preferences
   :align: center
   
   SSL Client Preferences



Key Store Settings
   Use custom key store
      If selected the key store configured below is used to read the
      client's key. A client key is only necessary if the server
      requests SSL client authentication. If not selected the system
      keystore is used. The system keystore can be configured by setting
      the Java system property ``javax.net.ssl.keyStore``.

   Key store file
      The file containing the client keys.

   Key store password
      Password used to read the key store file.

   Key password
      Password needed to decrypt the key. If empty the key store
      password is used instead.

   Key store type
      The type of the key store (e.g. JKS or PKCS12). If empty the
      system default type is used.

   Key store provider
      The security provider used to read the key store. If empty the
      system default provider is used.

   Key store algorithm
      The algorithm used to read the key store. If empty the system
      default algorithm is used.

Trust Store Settings
   Trust store file
      The file containing the trusted server certificates and/or
      certificates of certification authorities. Press Add... to add a
      certificate from a file to the trust store.

   Trust store password
      Password used to read the trust store file.

   Trust store type
      The type of the trust store (e.g. JKS or PKCS12). If empty the
      system default type is used.

   Trust store provider
      The security provider used to read the trust store. If empty the
      system default provider is used.

   Trust store algorithm
      The algorithm used to read the trust store. If emtpy the system
      default algorithm is used.

   Trust manager class
      The full qualified class name of a trust manager class that is
      used to validate server certificates. If set system- and custom
      truststore are not in charge anymore.

Other SSL Settings
   Enable insecure SSL and HTTPS connections
      Manipulates the JVMs default SSLSocketFactory, so that untrusted
      (self signed or outdated) certificates are silently accepted. This
      could for instance be useful to generate a Webservice stub from an
      insecure WSDL location.

   Test custom Keystore/Truststore
      Tests if the specified Keystore/Truststore can be opened and read
      with the given configuration.

.. note::

   The SSL Client trust- and key store settings are currently only
   considered when sending mails, for REST client calls, CXF Web Service
   client calls and when loading web service definition (WSDL) files.
