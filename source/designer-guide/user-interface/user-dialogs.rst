.. _user-dialogs:

User Dialogs
============

A User Dialog is one of the two possibilities to interact with the user
in a process. The other possibility are simple :ref:`user-interface-web-page`.
User Dialogs are based on Java Server Faces (JSF) technology.

In |axon-ivy| we use :ref:`html-dialogs` - or HD for short
- as the name for a User Dialog Component built with JSF.


.. _user-dialog-concept:

User Dialog Concept
-------------------

The concept of a User Dialog follows the famous Model-View-Controller
pattern. It consist of the following parts:

-  Data - The internal data of the User Dialog (the model)

-  View / Panel - The visual representation of the User Dialog (the view)

-  Logic - The implementation of the functionality (the behavior) of the
   User Dialog (the controller)

-  Interface - A description of the capabilities of the User Dialog

The logic (i.e. controller) of User Dialogs is implemented in a process
based manner. This means that all the GUI events (which are generated by
the user who interacts with the dialog) are handled by means of a
corresponding UI process in the logic of the User Dialog component. So
the behavior of the User Dialog is not implemented by writing source
code in a programming language (such as Java, Visual Basic or C#) but
rather by graphically modeling a process logic in |axon-ivy|.

The multi-part structure of a User Dialog becomes also evident when
looking at its representation in the |axon-ivy| project tree:


.. figure:: /_images/user-interface/user-dialog-projecttree.png


Interface
^^^^^^^^^

The interface of a User Dialog defines its behavior in an abstract way
and independent of its implementation. In other words it defines *what*
a User Dialog is capable to do. In more detail, the interface defines
:ref:`user-dialog-interface-start-methods` and
:ref:`user-dialog-interface-methods` of a User Dialog.
The interface can be viewed with the :ref:`user-dialog-interface-editor`.



Logic
^^^^^

The logic of a User Dialog defines *how* a User Dialog performs its work
by means of a process model. For each *UI Event* (triggered by the
actual user, e.g. by clicking on a button) and for each *Start Method*
and *Method* defined on the interface you may implement a process to
handle these events.

The logic of a User Dialog is edited and defined using the :ref:`process-editor`.

To build the logic of a User Dialog the Process Editor offers a set of
process elements that is somewhat different from the standard set. The
extra *User Dialog* drawer of the Process Editor palette contains
elements, which can only be used within User Dialog logic:

.. table:: Process elements only available in User Dialog Logic
   :widths: 20 20 60

   +-----------------------+-----------------------+-----------------------+
   | Icon                  | Title                 | Short Description     |
   +=======================+=======================+=======================+
   | |image0|              | User Dialog           | Opens another User    |
   |                       |                       | Dialog                |
   +-----------------------+-----------------------+-----------------------+
   | |image1|              | Init Start            | Invoked when the User |
   |                       |                       | Dialog is started.    |
   |                       |                       | This element is       |
   |                       |                       | executed at most once |
   |                       |                       | and initializes the   |
   |                       |                       | User Dialog and its   |
   |                       |                       | data.                 |
   +-----------------------+-----------------------+-----------------------+
   | |image2|              | Method start          | Invoked when one of   |
   |                       |                       | the methods declared  |
   |                       |                       | in the User Dialog    |
   |                       |                       | Interface is called.  |
   +-----------------------+-----------------------+-----------------------+
   | |image3|              | Event Start           | Invoked when a mapped |
   |                       |                       | widget event is       |
   |                       |                       | received from the     |
   |                       |                       | view of the User      |
   |                       |                       | Dialog.               |
   +-----------------------+-----------------------+-----------------------+
   | |image4|              | Process End           | Ends a User Dialog UI |
   |                       |                       | process.              |
   +-----------------------+-----------------------+-----------------------+
   | |image5|              | Exit End              | Exits and closes this |
   |                       |                       | User Dialog and       |
   |                       |                       | continues with the    |
   |                       |                       | calling process (if   |
   |                       |                       | opened                |
   |                       |                       | synchronously).       |
   +-----------------------+-----------------------+-----------------------+

On the other hand, some elements of the *Dialog & Control* drawer are
missing, because they are forbidden:

.. table:: Process elements that are *forbidden* in User Dialog Logic
   :widths: 20 20 60
   
   +-----------------------+-----------------------+-----------------------+
   | Icon                  | Title                 | Short Explanation     |
   +=======================+=======================+=======================+
   | |image21|             | Request Start         | The normal Request    |
   |                       |                       | element is replaced   |
   |                       |                       | with the User Dialog  |
   |                       |                       | start element.        |
   +-----------------------+-----------------------+-----------------------+
   | |image22|             | Web Page              | The Page element is   |
   |                       |                       | HTML-specific and     |
   |                       |                       | thus not available in |
   |                       |                       | the User Dialog       |
   |                       |                       | logic.                |
   +-----------------------+-----------------------+-----------------------+
   | |image23|             | Tasks                 | The Tasks element is  |
   |                       |                       | not available because |
   |                       |                       | role change and task  |
   |                       |                       | data persistence can  |
   |                       |                       | only happen between   |
   |                       |                       | User Dialogs.         |
   +-----------------------+-----------------------+-----------------------+
   | |image24|             | Task                  | The Task element is   |
   |                       |                       | not available because |
   |                       |                       | role change and task  |
   |                       |                       | data persistence can  |
   |                       |                       | only happen between   |
   |                       |                       | User Dialogs.         |
   +-----------------------+-----------------------+-----------------------+
   | |image16|             | Event Start           | Start Event Beans are |
   |                       |                       | currently not         |
   |                       |                       | supported inside User |
   |                       |                       | Dialogs.              |
   +-----------------------+-----------------------+-----------------------+
   | |image26|             | Intermediate          | Intermediate Events   |
   |                       |                       | are currently not     |
   |                       |                       | supported inside User |
   |                       |                       | Dialogs.              |
   +-----------------------+-----------------------+-----------------------+
   | |image27|             | Call & Wait           | Call & Wait are       |
   |                       |                       | currently not         |
   |                       |                       | supported inside User |
   |                       |                       | Dialogs.              |
   +-----------------------+-----------------------+-----------------------+
   | |image28|             | Process End           | The regular Process   |
   |                       |                       | End element is        |
   |                       |                       | replaced with the     |
   |                       |                       | *User Dialog End*     |
   |                       |                       | element.              |
   +-----------------------+-----------------------+-----------------------+
   | |image29|             | End Page              | The End Page element  |
   |                       |                       | is HTML-specific and  |
   |                       |                       | thus not available in |
   |                       |                       | the User Dialog       |
   |                       |                       | logic.                |
   +-----------------------+-----------------------+-----------------------+


.. warning::

   When invoking callables from inside a User Dialog you have to bear in
   mind, that the callable process will be executed within the scope of
   the User Dialog that executes it, i.e. the same restrictions apply as
   if the callable was defined right inside the User Dialog's logic.
   This ultimately means that you have to ensure that the called
   (business) process does not contain any of the forbidden elements
   mentioned above. Otherwise you will experience failures or
   unpredictable results during execution of the callable process.



Data
^^^^

The data of a User Dialog define its internal state (if you are familiar
with the *MVC* pattern, you should consider the data as the *Model* of a
User Dialog). The data of a User Dialog has private scope (i.e. is not
visible from outside). Access can be granted by defining and
implementing methods that return or manipulate internal data.
The data of a User Dialog is edited with the :ref:`data-class-editor`.

.. |image0| image:: /_images/process-elements/user-dialog.png
.. |image1| image:: /_images/process-elements/user-dialog-start.png
.. |image2| image:: /_images/process-elements/user-dialog-method-start.png
.. |image3| image:: /_images/process-elements/user-dialog-event-start.png
.. |image4| image:: /_images/process-elements/user-dialog-process-end.png
.. |image5| image:: /_images/process-elements/user-dialog-exit-end.png
.. |image16| image:: /_images/process-elements/program-start.png
.. |image21| image:: /_images/process-elements/request-start.png
.. |image22| image:: /_images/process-elements/web-page.png
.. |image23| image:: /_images/process-elements/task-switch-gateway.png
.. |image24| image:: /_images/process-elements/task-switch-event.png
.. |image26| image:: /_images/process-elements/wait-program-intermediate-event.png
.. |image27| image:: /_images/process-elements/call-and-wait.png
.. |image28| image:: /_images/process-elements/process-end.png
.. |image29| image:: /_images/process-elements/process-end-page.png








.. _user-dialog-interface-editor:

User Dialog Interface Editor
----------------------------

The User Dialog Interface editor is used to define the *API (Application
Programming Interface*) of a User Dialog. Since User Dialogs are
components which are intended for reuse, they must define a stable
interface on which other clients (i.e. processes or User Dialogs) can
rely upon. An interface is defined independently from the implementation
of the User Dialog and therefore separates the way of *how* a User
Dialog performs its work from the declaration of *what* it is capable to
do.

Accessibility
^^^^^^^^^^^^^

|axon-ivy| Project Tree -> double click on the *Interface* node below a
User Dialog in the tree.


Interface tab
^^^^^^^^^^^^^

The User Dialog Interface editor consists of the sections for the
declaration of :ref:`user-dialog-interface-start-methods` and
:ref:`user-dialog-interface-methods`. Each section can
have multiple entries.

.. tip::

   It is strongly recommended to write a short description for each
   declared interface part in the *Description* area of the details
   pane. This will help clients of the User Dialog to understand the
   characteristics of the respective part.


.. _user-dialog-interface-start-methods:

Start Methods
^^^^^^^^^^^^^

Start methods define different entry points into a User Dialog. A User
Dialog can be started with different parameters and return different
values, depending on which entry point is chosen at call time.

|Dimage1|

To add/edit a *Start method* you must add/edit a 'Init start' on
the according process. You must provide a *name* as well as *input* and
*output* parameters.

.. tip::

   If the *name/parameter* combination (the so called *signature*) of
   the Start method as defined so far is identical to the signature of
   another Start method, then a validation error will be displayed. The
   warning disappears when either arguments are added or argument types
   are changed or if the name of the method is altered accordingly, i.e.
   the signatures are no more identical.

.. note::

   Start methods visible in the User Dialog Interface can be selected
   inside a :ref:`process-element-user-dialog` when the
   respective User Dialog is chosen to be started.

   |Dimage2|


.. _user-dialog-interface-methods:

Methods
^^^^^^^

In the *Methods* section of the User Dialog Interface Editor the regular
interaction methods of a User Dialog are visualized. The declaration of
*Methods* is absolutely similar to the declaration of *Start methods*,
with the sole difference that a *Method* can only have a single return
parameter (or none). The *Methods* can only be called from the
:ref:`process-element-user-dialog-method-start`.


Metadata tab
^^^^^^^^^^^^

You can define a textual description, a set of tags (keywords) for each
User Dialog. These can be searched by the :ref:`Ivy search
page <designer-search>`.

Description
   A description of the User Dialog

Tags
   The tags are a space separated list of keywords used to categorize
   User Dialogs. We suggest to define a vocabulary of tags within your
   team/company to always use the same terms.

.. |Dimage1| image:: /_images/user-interface/interface-editor-start-methods.png
.. |Dimage2| image:: /_images/user-interface/interface-editor-start-methods-use.png




.. _user-dialog-new-wizard:

New User Dialog Wizard
----------------------

The New User Dialog wizard lets you create a new User Dialog. This can
be a Html Dialog or an Offline Dialog.

The wizard creates several resources for the new User Dialog:

View
   The visual component of the User Dialog (different technologies are
   possible).

Process
   The Process that contains the logic of the User Dialog.

Data Class
   The Data Class that holds the data of the User Dialog.

Interface
   The Interface list the ways of interaction with other User Dialogs
   or business processes.

Accessibility
^^^^^^^^^^^^^

File -> New -> Html Dialog


.. _user-dialog-new-wizard-page-1:

Page 1: Dialog Definitions
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. figure:: /_images/user-interface/new-user-dialog.png
   :alt: The New User Dialog Wizard Page 1

   The New User Dialog Wizard Page 1

Project name
   Choose the project that your User Dialog belongs to.

Namespace
   Enter a namespace for your User Dialog. Use namespaces to group your
   User Dialogs. The grouping hierarchy is separated by the dot
   character. This is a similar concept as *packages* in the Java
   programming language.

Name
   Enter the name of the User Dialog that you want to create.

Dialog Type
   Select the type of the User Dialog that you want to create.

   .. tip::

      Since *Html Dialog* as well as *Offline Dialog* both base on JSF
      technology, it's possible to switch between those two dialog types
      after creation.

View Type
   A view type defines how the User Dialog will be. It depends on the dialog
   type. You can choose if a User Dialog should be created with the *css grid*, so
   it acts responsive to the display width or not. If you want a
   reusable Html component, select a *Component* type.

Layout
   The layout can only be changed if you choose *Html Dialog* and not
   *Component* as view type. All your templates which are located in your
   webContent/layouts folder are listed here. 

Page 2: Dialog Data
^^^^^^^^^^^^^^^^^^^

.. figure:: /_images/user-interface/new-user-dialog-data.png
   :alt: The New User Dialog Wizard Page 2

   The New User Dialog Wizard Page 2

This page provides the functionality to create necessary configuration
of a User Dialog simple and quickly. The starting point is a data class.
e.g. the data class of the process that calls the User dialog. Based on
this data class the following configuration could be created:

Start-Method
   A start method is created based on the selected In and Out
   attributes. The necessary parameter mapping will be automatically
   generated.

Data Class fields
   For each selected In/Out attribute a field will be created in the
   Data Class of the User Dialog. The name of the created field could be
   defined in the column 'Field Name'.

Form (for Html/Offline Dialogs)
   For each selected UI attribute a form field is created in the view.
   E.g. for a field birthday, of type Date, a label and a datepicker
   will be generated.


.. tip::

   Create a User Dialog in the context of a User Dialog Process Element:
   If the New User Dialog Wizard is opened on a User Dialog Process
   Element, the initial Caller Class will be the class of the calling
   process and the in/out parameter mapping from the process to the User
   Dialog and back will be generated automatically.

.. tip::

   Create a User Dialog in the context of a Data Class: If the New User
   Dialog Wizard is started via the context menu on a Data Class, the
   initial Caller Class will be the selected Data Class.
   
   
   


.. include:: _html-dialogs.rst

